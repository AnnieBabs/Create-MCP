/**
 * {{PROJECT_NAME}} - Modern Model Context Protocol Server
 * {{PROJECT_DESCRIPTION}}
 * 
 * This server demonstrates modern MCP features including:
 * - Modular architecture with clean separation of concerns
 * - Streamable HTTP transport (protocol 2025-03-26)
 * - Stdio transport for command-line integration
 * - Interactive elicitation capabilities
 * - Advanced data sampling techniques
 * - Comprehensive tooling and resources
 * - Health monitoring and logging
 * - CORS support for browser clients
 */

import { logger } from "./utils/logger.js";
import { ServerFactory } from "./core/server-factory.js";
import { TransportManager } from "./transports/transport-manager.js";

/**
 * Main execution logic
 */
async function main(): Promise<void> {
  try {
    logger.info("Starting {{PROJECT_NAME}} server...");

    // Parse command line arguments
    const args = process.argv.slice(2);

    // Display help if requested
    if (args.includes('--help') || args.includes('-h')) {
      displayHelp();
      process.exit(0);
    }

    // Create server factory
    const serverFactory = ServerFactory.getInstance();

    // Validate configuration
    const validation = serverFactory.validateConfiguration();
    if (!validation.valid) {
      logger.error("Configuration validation failed:");
      validation.errors.forEach(error => logger.error(`  - ${error}`));
      process.exit(1);
    }

    // Create and start server
    const server = await serverFactory.createAndStartServer({ args });

    logger.info("{{PROJECT_NAME}} server started successfully");
    
    // Log available capabilities
    const status = await server.getStatus();
    logger.info("Server capabilities:");
    logger.info(`  ✓ Tools: ${status.capabilities.tools ? 'enabled' : 'disabled'} (${Object.keys(status.capabilities).filter(k => status.capabilities[k as keyof typeof status.capabilities]).length} features)`);
    logger.info(`  ✓ Resources: ${status.capabilities.resources ? 'enabled' : 'disabled'}`);
    logger.info(`  ✓ Prompts: ${status.capabilities.prompts ? 'enabled' : 'disabled'}`);
    logger.info(`  ✓ Elicitations: ${status.capabilities.elicitations ? 'enabled' : 'disabled'}`);
    logger.info(`  ✓ Sampling: ${status.capabilities.sampling ? 'enabled' : 'disabled'}`);
    
    // Get transport info and provide connection instructions
    const configManager = serverFactory.getConfigManager();
    const transportConfig = configManager.getTransportConfig();
    
    if (transportConfig.type === 'http') {
      logger.info("");
      logger.info("🚀 HTTP Server Ready!");
      logger.info(`📡 Test with MCP Inspector: npm run inspector:http`);
      logger.info(`🔧 API Documentation: http://localhost:${transportConfig.port}/info`);
      logger.info(`❤️ Health Check: http://localhost:${transportConfig.port}/health`);
    } else {
      logger.info("");
      logger.info("🚀 Stdio Server Ready!");
      logger.info("📡 Test with MCP Inspector: npm run inspector:cli");
      logger.info("🔧 Connect with Claude Desktop or other MCP clients");
    }

    logger.info("");
    logger.info("Server ready to handle requests...");
    
    // Keep the process running
    process.stdin.resume();

  } catch (error) {
    logger.error('Failed to start server:', error);
    process.exit(1);
  }
}

/**
 * Display help information
 */
function displayHelp(): void {
  console.log(`
{{PROJECT_NAME}} - Modern Model Context Protocol Server

USAGE:
  npm run dev:stdio          # Start with stdio transport  
  npm run dev:http           # Start with HTTP transport
  npm run dev:http:oauth     # Start with OAuth enabled
  npm run dev:http:stateless # Start in stateless mode

TESTING:
  npm run inspector         # Launch MCP Inspector (UI)
  npm run inspector:cli     # Test via command line
  npm run test:tools        # List available tools
  npm run test:resources    # List available resources
  npm run test:prompts      # List available prompts

TRANSPORT OPTIONS:
  stdio                     # Standard input/output (default)
  http                      # HTTP server on port 3000

HTTP OPTIONS:
  --oauth                   # Enable OAuth authentication
  --no-dns-protection       # Disable DNS rebinding protection  
  --stateless               # Enable stateless mode
  --port=3000               # Custom port (default: 3000)
  --log-level=info          # Log level (debug|info|warn|error)

FEATURES:
  ✓ 2 comprehensive tools (data-analysis, server-status)
  ✓ Rich resources with documentation and templates
  ✓ Multi-methodology research prompts
  ✓ Interactive elicitation and AI sampling
  ✓ MCP Inspector integration for testing

Learn more: https://github.com/LinuxDevil/Create-MCP
`);
}

/**
 * Graceful shutdown handling
 */
function setupGracefulShutdown(): void {
  const shutdown = async (signal: string) => {
    logger.info(`Received ${signal}, shutting down gracefully...`);
    process.exit(0);
  };

  process.on('SIGINT', () => shutdown('SIGINT'));
  process.on('SIGTERM', () => shutdown('SIGTERM'));

process.on('uncaughtException', (error) => {
  logger.error('Uncaught exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled rejection at:', promise, 'reason:', reason);
  process.exit(1);
});
}

// Setup graceful shutdown
setupGracefulShutdown();

// Check if this module is being run directly (ES module equivalent of require.main === module)
// For ES modules, we check if the current file matches the entry point
const isMainModule = process.argv[1] && (
  import.meta.url === `file://${process.argv[1]}` ||
  import.meta.url.endsWith(process.argv[1]) ||
  process.argv[1].includes('server.ts') ||
  process.argv[1].includes('server.js')
);

if (isMainModule || !process.argv[1]) {
  main().catch((error) => {
    logger.error('Server startup failed:', error);
    process.exit(1);
  });
}